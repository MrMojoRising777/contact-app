INSERTING DATA INTO DB USING TINKER  |each line = enter in ternminal
  * terminal > php artisan tinker
  * use illuminate\Support\Facades\DB
  * DB::table('table_name)->insert([
  *   'name' => 'user',
  *   'email' => 'user@test.com',
  *   'password' => '1234'
  * ])

INSERT & GET ID + ASSIGN TO VARIABLE
  * $userId = DB::table('table_name)->insertGetId([
  *   'name' => 'user 2',
  *   'email' => 'email@google.net',
  *   'password' => 'notPassword'
  * ])

INSERT MULTIPLE AT ONCE |inserts into variable $userId
  * DB::table('tasks)->insert([
  *  [
  *    'name' => 'task 2',
  *    'user_id' => '$userId'
  *  ],
  *  [
  *    'name' => 'task 3',
  *    'user_id' => '$userId'
  *  ]
  * ])

UPDATING ROW
  * DB::table('users')->where('user_id', '1')->update([
  *  'email_verified_at' => now()
  * ])

UPDATE IF ROW EXISTS, ELSE INSERT
  * DB::table('users')->updateOrInsert(
  *  ['email' => 'user2@test.com', 'password' => '12345'],               // checks rows
  *  ['email_verified_at' => now(), 'name' => 'user 3']                  // updates rows
  * )

INCREMENT OR DECREMENT
  * DB::table('tasks')->where('id', 1)->increment('priority')            // increments column 'priority'
  * DB::table('tasks')->where('id', 1)->increment('priority', 3)         // increments column 'priority' by 3
  * DB::table('tasks')->where('id', 1)->decrement('priority')            // decrements column 'priority'

DELETE ROW
  * DB::table('tasks')->where('id', 2)->delete()                         // deletes row where 'id' = 2
  * DB::table('tasks')->delete()                                         // deletes all rows
  * DB::table('tasks')->truncate()                                       // deletes all rows + resets auto_increment id to 0

RETRIEVING ALL ROWS
  * DB::table('users')->get()                                            // retrieves all rows from 'users'
  
  * $users = DB::table('users')->get()                                   // asign all rows from 'users' to variable $users

  * foreach ($users as $user) {
  *  echo $user->name . "\n"; 
  * }                                                                    // loop through $users and show name

DEBUG
  * $users = DB::table('users)->dd()
  * $users = DB::table('users')->dump()

ORDER BY
  * $users = DB::table('users')->orderBy('name', 'asc')->get()           // retrieves all rows from 'users' ascending | can also be desc OR orderByDesc/orderByAsc
                                                                         // ->latest()  order by 'created_at' desc or specify latest('email_verified_at')
                                                                         // ->oldest()  order by 'created_at' asc or specify oldest('email_verified_at')
                                                                         // ->take(2) limit rows being retrieved to 2 OR ->skip(1) skips 1 row from being retrieved

RETRIEVING SINGLE ROW
  * $users = DB::table('users)->pluck('name')                            // only retrieves column 'name'
  * $users = DB::table('users)->pluck('name', 'id')                      // retrieves columns 'name' & 'id'

  * $users = DB::table('users)->find(3)                                  // retrieves row where id = 3
  * $users = DB::table('users)->where('name', 'user 1')->first()         // retrieves row where 'name' = 'user 1'
  * $users = DB::table('users)->where('name', 'user 1')->value('name')   // retrieves only column 'name' of row where 'name' = 'user 1'


FAKER LIBRARY
 * terminal > php artisan tinker
 * use Faker\Factory as Faker
 * $faker = Faker::create()
 * $faker->name()                                                         // generates fake name | alternative: email, company, address, domainName, url, slug, ipv4, text, word, etc ..
                                                                          // check out: fakerphp.github.io


QUERYING DATABASE W/ ELOQUENT
  * terminal > php artisan tinker
  * use App\Models\Company
  * Company::all()
  // same queries as Query Builder

MULTIPLE WHERE CLAUSES
  * Company::where('email', 'mail@company.net')->where('website', 'test.com')->toSql()  // returns SQL query where row is email and website

  * Company::where(['email' => 'mail@company.net', 'website' => 'test.com'])            // alternative query
  * Company::where('id', '>', 1)->where('id', '<=', 5)                                  // retrieves rows where id between 2 and 5
  * Company::where('id', '=', 1)->orWhere('id', '=', 5)                                 // retrieves rows where id = 1 or 5
  * Company::whereNot('id', '=', 5)                                                     // retrieves rows where id != 5
  * Company::whereIn('id', [1, 2, 3])                                                   // retrieves rows where id = 1, 2 and 3
  * Company::whereBetween('id', [5, 10])                                                // retrieves rows where id between 5 and 10
  * Company::whereNull('address')                                                       // retrieves rows 'address' is null
  * Company::whereDate('created_at', '2023-12-04')                                      // retrieves rows where created_at is 2023-12-04

INSERT
  * Company::insert([
  *  'name' => 'Company X',
  *  'email' => 'companyx@test.com'
  * ])                                                                                  // creates new Company w/ 'name' Company X & 'email' company@test.com

  * $company = new Company
  * $company->name = "My Company"
  * $company->email = "mycompany@test.com"
  * $company->website = "mywebsite.com"
  * $company->save()                                                                    // creates new Company w/ 'name' My Company, 'email' mycompany@test.com & 'website' mywebsite.com

  *$company = new Company(['name' => 'My Company', 'email' => 'mycompany@test.com', 'website' => 'mywebsite.com'])

UPDATE
  * Company::where('email', 'mycompany@test.com')->update([
  *  'website' => 'https://mywebsite.com'
  * ])                                                                                  // updates website in row where email = mycompany@test.com

  * $company->website = "https://mywebsitecompany.com"
  * $company->update()                                                                  // alternatively update

DELETE
  * $company->delete()
  * Company::destroy(11)                                                                 // deletes row where id = 11
  * Company::destroy([8, 9, 10])                                                         // deletes row where id = 8, 9 & 10


MASS ASSIGNMENT (in order to avoid error, add protected $guarded = []; to 'Company Model'  !! $guarded ony allows column that already exist in table)
  * use App\Models\Company
  * $data = [
  *  "name" => "Company 3",
  *  "email" => "Email company 3",
  *  "address" => "Address company 3",
  *  "website" => "Website company 3",
  * ]
  * Company::create($data)

INSERTING OR UPDATING METHOD

<?php

// 1

// $company = Company::where('email', "company1@test.com")->first();

// if (! $company) {
//   $company = new Company();
//   $company->email = "company1@test.com";
//   $company->name = "Company 1";
// }

// simplified
$company = Company::firstOrNew(
  ['email', "company1@test.com"],
  ['name', "Company 1"]
);
$company->save();


// 2

// $company = Company::where('email', "company2@test.com")->first();

// if (! $company) {
//   $company = new Company();
//   $company->email = "company2@test.com";
//   $company->name = "Company 2";
// }

// simplified
Company::firstOrCreat(
  ['email' => "company2@test.com"],
  ['name' => "Company 2"]
);

// 3

// $company = Company::where('email', "company3@test.com")->first();

// if ($company) {
//   $company->update(["name" => "Company 2"]);
// } else {
//   $company = Company::create([
//     "email" => "company3@test.com",
//     "name" => "Company 3"
//   ]);
// }

// simplified
Company::updateOrCreate(
  ['email' => "company3@test.com"],
  ["name" => "Company 3"]
);

UPSERT METHOD  (update or insert multiple at once, need unique index | ->unique() in migration)

User::upsert([
  ['name' => 'User 1', 'email' => 'user1@test.com', 'password' => '123'],
  ['name' => 'User 2', 'email' => 'user2@test.com', 'password' => '456'],
  ['name' => 'User 3', 'email' => 'user3@test.com', 'password' => '789'],
], ['email'], ['name', 'password'])